# Application name
spring.application.name=currency-exchange
# Specify the port
server.port=8000
# Line below is needed for latest Spring Boot > 2.4.2
spring.config.import=optional:configserver:http://localhost:8888
spring.cloud.config.discovery.enabled=false
# See all the SQL statements that are generated
spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.h2.console.enabled=true
# Defer the data loading due to the latest version of Spring configuration.
# This prevents the data from being loaded BEFORE the database gets initialized
spring.jpa.defer-datasource-initialization=true
# Configurations for the Eureka Naming Server URL (Just to be safe)
# Over here, '8761' is the port of the Eureka Naming Server
# Visit http://localhost:8761 for the registration details
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

eureka.instance.hostname=localhost
eureka.instance.prefer-ip-address=true

#eureka.client.register-with-eureka=false
#eureka.client.fetch-registry=false

# Config the Retry
resilience4j.retry.instances.sample-api.max-attempts=5
# Set up the time interval in seconds between each retry
resilience4j.retry.instances.sample-api.wait-duration=2s
# Set up the exponential increase of the time interval of each retry with a base number of 'wait-duration'(1,2,4,8,...)
# If all retries fail, then it will return a default response (as set up already in the controller)
resilience4j.retry.instances.sample-api.enable-exponential-backoff=true

# Rate Limiter
# Allow 10 requests for every 5 secs
resilience4j.ratelimiter.instances.default-rate-limiter.limit-for-period=2
resilience4j.ratelimiter.instances.default-rate-limiter.limit-refresh-period=10s
# Limit the maximum of concurrent calls
resilience4j.bulkhead.instances.bulkhead-rate-limiter.max-concurrent-calls=10

# Configure a sampling (in percentage, 0.5=50%)
spring.sleuth.sampler.probability=1.0